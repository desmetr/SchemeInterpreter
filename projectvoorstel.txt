INTRODUCTIE

Slide: Symbool van scheme (http://upload.wikimedia.org/wikipedia/commons/3/39/Lambda_lc.svg) en onze namen

gewoon zeggen wat ons project is


WAT IS SCHEME?

We zullen starten met een beetje achtergrondinformatie over Scheme. Scheme is een dialect van Lisp, een van de oudste programmeertalen die vandaag nog in gebruik zijn, en een taal die nog steeds bekend staat om zijn elegantie en eenvoud. Onderzoek gerelateerd aan Lisp heeft geleid tot het bedenken van belangrijke concepten in de moderne informatica, zoals 
    - recursie,
    - boomstructuren,
    - dynamic typing,
    - garbage collection,
    - conditionele expressies,
    - functies van hogere orden enzovoorts

Slide met 2 puntjes: "Een atoom", ""[OK]
Een Lisp programma is volledig opgebouwd uit S-expressies. Een S-expressie kan je eenvoudig recursief beschrijven als 
    - Een atoom (basisgeval), of
    - Een lijst bestaande uit S-expressies.

Op deze manier kunnen we in Lisp en zijn dialecten complexe ideeen op een uniforme en eenvoudige manier uitdrukken. 

Slide: onder elkaar de atomen 42, 12.54, pi, squareroot[OK]
Getallen, symbolen (strings), functies, variabelen etc worden uitgedrukt als atomen.

Slide: onder elkaar de lijsten (34 267 1 23), (+ 7 9), (define x 4), (define square (lambda a (* a a))), (square 4)[OK]
Lijsten zullen we dan gebruiken om
    - data te groeperen (eerste voorbeeld)
    - functies toe te passen op parameters (tweede voorbeeld)
    - speciale constructies van de taal aan te roepen (zoals 'define' en 'lambda', op het eerste zicht lijken deze op functieaanroepingen maar intern werken ze anders)



TOEPASSING VAN TALEN EN AUTOMATEN

Je ziet dus dat de syntax van Scheme opvallend eenvoudig is. De code wordt net als de data eenvoudigweg in lijsten geplaatst, Lisp maakt dus geen strikt onderscheid tussen wat code is en wat data is.

Een belangrijke stap in de interpretatie van een programmeertaal is het omzetten van de tekstuele voorstelling van de code naar een boomstructuur die de computer kan interpreteren. Dit is het werk van de parser. Voordat de parser de boomstructuur kan opbouwen moet hij eerst de code omzetten in een lijst van 'tokens'. Je kan dit zien als de omzetting van een string van karakters (de inputstring) naar een reeks van objecten die de interpreter kan begrijpen. Als je aan de interpreter de expressie (square 5) meegeeft, is de tokenizatie hiervan 'een open haakje', het symbool 'square', het geheel getal '5' en 'een sluitend haakje'. In deze procedure, ook wel 'lexicale analyse' genoemd, vindt de automatentheorie haar toepassing in ons programma.

# Slide: regexes voor symbol, int en float volledig uitgeschreven (dus delimiters er expliciet aan toevoegen) op een slide [OK]
We gaan dus automaten gebruiken om strings om te zetten in makkelijker te verwerken objecten, waarbij we ook verschillende soorten objecten onderscheiden. Zo zal de lexer in staat zijn om gehele getallen, kommagetallen en symbolen van elkaar te onderscheiden. We doen dit door voor elk type object een regex te definieren, die we dan gebruiken om een DFA te genereren. Zo zal de integer DFA alle strings aanvaarden die uitsluitend uit cijfers bestaan (minstens 1), gevolgd door een of andere delimiter (een haakje of spatie).

Slide: "test123+ -> aaaa000_"
Om te vermijden dat de automaten enorm groot worden omdat ze alle letters van het alfabet, alle cijfers en dan nog enkele speciale karakters moeten herkennen, vereenvoudigen we eerst de strings alvorens ze door te geven aan de DFA's. Een DFA die alle geldige gehele getallen herkent, hecht geen belang aan welke cijfers er nu precies in de string staan, hij moet enkel onderscheid kunnen maken tussen getallen en andere symbolen. Daarom vereenvoudigen we de input naar een voorstelling die enkel de categorie waartoe de karakters behoren weergeeft. De string "test123+" wordt "aaaa000_", waarbij a eender welke letter voorstelt, 0 eender welk cijfer, en _ een speciaal karakter. Zo hoeven de automaten slechts een beperkt aantal karakters te herkennen.

Slide: (+ (square 4) 3) -> boomstructuur: lege wortel met drie kinderen ['+', lege knoop met 2 kinderen ['square', 4], 3]
Dan komen we aan het parsen zelf. De parse functie aanvaardt een string en parset er het eerste element van. Eerst wordt whitespace getrimd (met behulp van een whitespace herkennende DFA die een iterator teruggeeft naar het eerste niet-whitespace karakter), daarna wordt gekeken of het eerste karakter een open haakje is of niet. Aan de hand daarvan wordt beslist om het element als lijst of als atoom te parsen. De parseAtom functie gaat kijken welke DFA het eerste element in de string wilt aanvaarden (bv square en + worden aanvaard door de Symbols DFA, 4 en 3 door de integer DFA). Het verpakt het geidentificeerde element in een object en returnt een iterator naar het eerste karakter dat volgt op het element (een spatie of een haakje dus). parseList gaat eenvoudigweg parse telkens oproepen op het eerstvolgende element na de iterator, tot die een gesloten haakje tegenkomt, en bouwt zo de boomstructuur op.
